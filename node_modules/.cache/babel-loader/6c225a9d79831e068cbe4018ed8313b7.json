{"ast":null,"code":"// 管理\nimport * as constants from './constants';\nimport { fromJS } from 'immutable'; // 把js 对象转成immutable 对象\n//state 变成一个immutable 对象\n\nconst defaultState = fromJS({\n  focused: false,\n  mouseIn: false,\n  list: [],\n  page: 1,\n  totalPage: 1\n}); //导出纯函数: 给定固定的输入，得出固定的输出\n//immutable 对象的set 会结合之前的immutable 对象的值 和设置的值返回一个全新的对象，并不会改原始数据。\n//优化过的\n\nexport default ((state = defaultState, action) => {\n  switch (action.type) {\n    case constants.SEARCH_FOCUS:\n      return state.set('focused', true);\n    //没有跟break是因为后面return\n\n    case constants.SEARCH_BLUR:\n      return state.set('focused', false);\n\n    case constants.CHANGE_LIST:\n      return state.merge({\n        list: action.data,\n        totalPage: action.totalPage\n      });\n    //merge: 可以同时改变多个数据内容，相当于多次调用set,但是性能更高，因为只merge一次，而set要 调用几次就要返回几次immutable数据\n    // state.set('list', action.data).set('totalPage', action.totalPage);\n\n    case constants.MOUSE_ENTER:\n      return state.set('mouseIn', true);\n\n    case constants.MOUSE_LEAVE:\n      return state.set('mouseIn', false);\n\n    case constants.UPDATE_CONTENT:\n      return state.set('page', action.page);\n\n    default:\n      return state;\n  }\n}); // 没有优化的\n// if(action.type === constants.SEARCH_FOCUS){\n//   return state.set('focused', true)\n// }\n// if(action.type === constants.SEARCH_BLUR){\n//   return state.set('focused', false)\n// }\n// if(action.type === constants.CHANGE_LIST){\n//   return state.set('list', action.data);\n// }","map":{"version":3,"sources":["/Users/zoemeng/zoe/learn/jianshu_project/client/src/common/header/store/reducer.js"],"names":["constants","fromJS","defaultState","focused","mouseIn","list","page","totalPage","state","action","type","SEARCH_FOCUS","set","SEARCH_BLUR","CHANGE_LIST","merge","data","MOUSE_ENTER","MOUSE_LEAVE","UPDATE_CONTENT"],"mappings":"AAAA;AACA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAAQC,MAAR,QAAqB,WAArB,C,CAAkC;AAElC;;AACA,MAAMC,YAAY,GAAGD,MAAM,CAAC;AAC1BE,EAAAA,OAAO,EAAG,KADgB;AAE1BC,EAAAA,OAAO,EAAE,KAFiB;AAG1BC,EAAAA,IAAI,EAAE,EAHoB;AAI1BC,EAAAA,IAAI,EAAE,CAJoB;AAK1BC,EAAAA,SAAS,EAAE;AALe,CAAD,CAA3B,C,CASA;AACC;AAED;;AACA,gBAAe,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKV,SAAS,CAACW,YAAf;AACA,aAAOH,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,IAArB,CAAP;AACA;;AACA,SAAKZ,SAAS,CAACa,WAAf;AACA,aAAOL,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,KAArB,CAAP;;AAEA,SAAKZ,SAAS,CAACc,WAAf;AACA,aAAON,KAAK,CAACO,KAAN,CAAY;AACjBV,QAAAA,IAAI,EAAEI,MAAM,CAACO,IADI;AAEjBT,QAAAA,SAAS,EAAEE,MAAM,CAACF;AAFD,OAAZ,CAAP;AAIA;AACA;;AAEA,SAAKP,SAAS,CAACiB,WAAf;AACA,aAAOT,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,IAArB,CAAP;;AAEA,SAAKZ,SAAS,CAACkB,WAAf;AACA,aAAOV,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB,KAArB,CAAP;;AAEA,SAAKZ,SAAS,CAACmB,cAAf;AACA,aAAOX,KAAK,CAACI,GAAN,CAAU,MAAV,EAAkBH,MAAM,CAACH,IAAzB,CAAP;;AAEA;AACA,aAAOE,KAAP;AAzBF;AA2BD,CA5BD,E,CA8BA;AACE;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// 管理\nimport * as constants from './constants';\nimport {fromJS} from 'immutable'; // 把js 对象转成immutable 对象\n\n//state 变成一个immutable 对象\nconst defaultState = fromJS({\n  focused : false,\n  mouseIn: false,\n  list: [],\n  page: 1,\n  totalPage: 1\n});\n\n\n//导出纯函数: 给定固定的输入，得出固定的输出\n //immutable 对象的set 会结合之前的immutable 对象的值 和设置的值返回一个全新的对象，并不会改原始数据。\n\n//优化过的\nexport default (state = defaultState, action) => {\n  switch(action.type){\n    case constants.SEARCH_FOCUS : \n    return state.set('focused', true);\n    //没有跟break是因为后面return\n    case constants.SEARCH_BLUR:\n    return state.set('focused', false);\n    \n    case constants.CHANGE_LIST:\n    return state.merge({\n      list: action.data,\n      totalPage: action.totalPage\n    });\n    //merge: 可以同时改变多个数据内容，相当于多次调用set,但是性能更高，因为只merge一次，而set要 调用几次就要返回几次immutable数据\n    // state.set('list', action.data).set('totalPage', action.totalPage);\n\n    case constants.MOUSE_ENTER:\n    return state.set('mouseIn', true);\n\n    case constants.MOUSE_LEAVE:\n    return state.set('mouseIn', false);\n\n    case constants.UPDATE_CONTENT:\n    return state.set('page', action.page);\n\n    default:\n    return state;\n  }\n};\n\n// 没有优化的\n  // if(action.type === constants.SEARCH_FOCUS){\n  //   return state.set('focused', true)\n  // }\n\n  // if(action.type === constants.SEARCH_BLUR){\n  //   return state.set('focused', false)\n  // }\n\n  // if(action.type === constants.CHANGE_LIST){\n  //   return state.set('list', action.data);\n  // }\n"]},"metadata":{},"sourceType":"module"}