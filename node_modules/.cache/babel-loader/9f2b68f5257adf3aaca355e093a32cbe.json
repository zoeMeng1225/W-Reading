{"ast":null,"code":"var _jsxFileName = \"/Users/zoemeng/zoe/learn/jianshu_project/client/src/pages/home/index.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport BannerImg from '../../assets/reading.jpg';\nimport Topic from './components/Topic';\nimport List from './components/List';\nimport Recommend from './components/Recommend';\nimport Writer from './components/Writer';\nimport { HomeWrapper, HomeLeft, HomeRight, BackTop } from './style';\nimport { actionCreator } from './store'; //用PureComponent  的时候，必须保证数据都是immutable的，也就是用了immutable.js 的组件才可以\n\nclass Home extends PureComponent {\n  render() {\n    const {\n      showScroll\n    } = this.props;\n    return /*#__PURE__*/React.createElement(HomeWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(HomeLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: BannerImg,\n      alt: \"\",\n      className: \"banner-img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Topic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(HomeRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Writer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Recommend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    })), showScroll ? /*#__PURE__*/React.createElement(BackTop, {\n      onClick: this.handleScrollTop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"iconfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"\\uE608\")) : null);\n  } //只改变此组件相关的组件,减少虚拟dom 的比对，提高性能\n  // 但如果用这种方法：shouldComponentUpdate(),一个个写太麻烦\n\n\n  handleScrollTop() {\n    window.scrollTo(0, 0); //左侧是0，顶部也是0\n  } //生命周期函数，当页面显示出来后，请求数据\n  //请求好了数据再把剩下的内容显示出来\n\n\n  componentDidMount() {\n    this.props.getHomeData();\n    this.bindEvents(); //监听scroll的event\n  } //绑定\n\n\n  bindEvents() {\n    window.addEventListener('scroll', this.props.changeScrollTopShow);\n  } //解除绑定: 解除的用处就是不会影响其它组件\n\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.props.changeScrollTopShow);\n  }\n\n}\n\nconst mapState = state => ({\n  showScroll: state.getIn(['home', 'showScroll'])\n}); //把逻辑组件不要放在UI组件中\n\n\nconst mapDispatch = dispatch => ({\n  getHomeData() {\n    dispatch(actionCreator.getHomeInfo()); // action is a function;\n  },\n\n  changeScrollTopShow() {\n    if (document.documentElement.scrollTop > 200) {\n      dispatch(actionCreator.toggleTopShow(true));\n    } else {\n      dispatch(actionCreator.toggleTopShow(false));\n    } //document.documentElement.scrollTop 可以看到屏幕滚动的值\n\n  }\n\n}); //暂时用不到这个store 里的数据，只是改变store里的数据\n\n\nexport default connect(mapState, mapDispatch)(Home);","map":{"version":3,"sources":["/Users/zoemeng/zoe/learn/jianshu_project/client/src/pages/home/index.js"],"names":["React","PureComponent","connect","BannerImg","Topic","List","Recommend","Writer","HomeWrapper","HomeLeft","HomeRight","BackTop","actionCreator","Home","render","showScroll","props","handleScrollTop","window","scrollTo","componentDidMount","getHomeData","bindEvents","addEventListener","changeScrollTopShow","componentWillUnmount","removeEventListener","mapState","state","getIn","mapDispatch","dispatch","getHomeInfo","document","documentElement","scrollTop","toggleTopShow"],"mappings":"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","sourcesContent":["import React,{PureComponent} from 'react';\nimport{connect} from 'react-redux';\nimport BannerImg from '../../assets/reading.jpg';\nimport Topic from './components/Topic';\nimport List from './components/List';\nimport Recommend from './components/Recommend';\nimport Writer from './components/Writer';\nimport {HomeWrapper, \n        HomeLeft,  \n        HomeRight,BackTop} from './style';\nimport { actionCreator } from './store';\n\n//用PureComponent  的时候，必须保证数据都是immutable的，也就是用了immutable.js 的组件才可以\nclass Home extends PureComponent{\n  render(){\n    const{showScroll} = this.props;\n    return(\n      <HomeWrapper>\n        <HomeLeft>\n          <img src= {BannerImg} alt=\"\"\n          className = \"banner-img\"\n          />\n          <Topic></Topic>\n          <List></List>\n        </HomeLeft>\n        <HomeRight>\n          <Writer></Writer>\n          <Recommend></Recommend>\n        </HomeRight>\n        {showScroll ? \n        <BackTop onClick = {this.handleScrollTop}> \n        <span className =\"iconfont\">&#xe608;</span>\n        </BackTop>\n        : null} \n      </HomeWrapper>\n    )\n  }\n\n  //只改变此组件相关的组件,减少虚拟dom 的比对，提高性能\n  // 但如果用这种方法：shouldComponentUpdate(),一个个写太麻烦\n\n  handleScrollTop(){\n    window.scrollTo(0,0) //左侧是0，顶部也是0\n  }\n\n  //生命周期函数，当页面显示出来后，请求数据\n  //请求好了数据再把剩下的内容显示出来\n\n\n  componentDidMount(){\n    this.props.getHomeData();\n    this.bindEvents(); //监听scroll的event\n  }\n\n  //绑定\n  bindEvents(){\n    window.addEventListener('scroll', this.props.changeScrollTopShow)\n  }\n\n  //解除绑定: 解除的用处就是不会影响其它组件\n  componentWillUnmount(){\n    window.removeEventListener('scroll', this.props.changeScrollTopShow)\n  }\n}\n\nconst mapState = (state) => ({\n  showScroll: state.getIn(['home','showScroll'])\n})\n//把逻辑组件不要放在UI组件中\nconst mapDispatch = (dispatch) => ({\n   getHomeData(){\n    dispatch(actionCreator.getHomeInfo()); // action is a function;\n  },\n  changeScrollTopShow(){\n    if(document.documentElement.scrollTop > 200){\n      dispatch(actionCreator.toggleTopShow(true));\n    }else{\n      dispatch(actionCreator.toggleTopShow(false));\n    }\n    //document.documentElement.scrollTop 可以看到屏幕滚动的值\n  }\n});\n\n//暂时用不到这个store 里的数据，只是改变store里的数据\nexport default connect(mapState,mapDispatch)(Home);"]},"metadata":{},"sourceType":"module"}